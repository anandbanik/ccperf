commit c55e1c1a0809b7b7ef120adead23aaebb7a2a842
Author: Yohei Ueda <yohei@jp.ibm.com>
Date:   Thu Feb 7 15:58:46 2019 +0900

    WIP: Prototype LSCC cache
    
    Change-Id: I17ef1dde308c301587d6a54e2f6e7fb4633be387
    Signed-off-by: Yohei Ueda <yohei@jp.ibm.com>

diff --git a/core/scc/lscc/lscc.go b/core/scc/lscc/lscc.go
index 60622c2cd..aad19bdc9 100644
--- a/core/scc/lscc/lscc.go
+++ b/core/scc/lscc/lscc.go
@@ -9,6 +9,7 @@ package lscc
 import (
 	"fmt"
 	"regexp"
+	"sync"
 
 	"github.com/golang/protobuf/proto"
 	"github.com/hyperledger/fabric/common/cauthdsl"
@@ -139,6 +140,9 @@ type LifeCycleSysCC struct {
 	Support FilesystemSupport
 
 	PlatformRegistry *platforms.Registry
+
+	// WIP: LSCC cache
+	cache sync.Map
 }
 
 // New creates a new instance of the LSCC
@@ -161,8 +165,30 @@ func (lscc *LifeCycleSysCC) InvokableExternal() bool   { return true }
 func (lscc *LifeCycleSysCC) InvokableCC2CC() bool      { return true }
 func (lscc *LifeCycleSysCC) Enabled() bool             { return true }
 
+func (lscc *LifeCycleSysCC) putCache(chaincodeName string, bytes []byte, stub shim.ChaincodeStubInterface) error {
+	err := stub.PutState(chaincodeName, bytes)
+	if err != nil {
+		return err
+	}
+	lscc.cache.Store(chaincodeName, bytes)
+	return nil
+}
+
+func (lscc *LifeCycleSysCC) getCache(chaincodeName string, qe ledger.SimpleQueryExecutor) ([]byte, error) {
+
+	entry, ok := lscc.cache.Load(chaincodeName)
+	if ok {
+		bytes, ok := entry.([]byte)
+		if !ok {
+			return nil, errors.Errorf("Unknown data type %s in LSCC cache", chaincodeName)
+		}
+		return bytes, nil
+	}
+	return qe.GetState("lscc", chaincodeName)
+}
+
 func (lscc *LifeCycleSysCC) ChaincodeContainerInfo(chaincodeName string, qe ledger.SimpleQueryExecutor) (*ccprovider.ChaincodeContainerInfo, error) {
-	chaincodeDataBytes, err := qe.GetState("lscc", chaincodeName)
+	chaincodeDataBytes, err := lscc.getCache(chaincodeName, qe)
 	if err != nil {
 		return nil, errors.Wrapf(err, "could not retrieve state for chaincode %s", chaincodeName)
 	}
@@ -183,7 +209,7 @@ func (lscc *LifeCycleSysCC) ChaincodeContainerInfo(chaincodeName string, qe ledg
 }
 
 func (lscc *LifeCycleSysCC) ChaincodeDefinition(chaincodeName string, qe ledger.SimpleQueryExecutor) (ccprovider.ChaincodeDefinition, error) {
-	chaincodeDataBytes, err := qe.GetState("lscc", chaincodeName)
+	chaincodeDataBytes, err := lscc.getCache(chaincodeName, qe)
 	if err != nil {
 		return nil, errors.Wrapf(err, "could not retrieve state for chaincode %s", chaincodeName)
 	}
@@ -208,7 +234,7 @@ func (lscc *LifeCycleSysCC) ChaincodeDefinition(chaincodeName string, qe ledger.
 // unexpected error is not nil and mark the transaction as invalid if the validation error
 // is not nil.
 func (lscc *LifeCycleSysCC) ValidationInfo(chaincodeName string, qe ledger.QueryExecutor) (plugin string, args []byte, unexpectedErr error, validationErr error) {
-	chaincodeDataBytes, err := qe.GetState("lscc", chaincodeName)
+	chaincodeDataBytes, err := lscc.getCache(chaincodeName, qe)
 	if err != nil {
 		// failure to access the ledger is clearly an unexpected
 		// error since we expect the ledger to be reachable
@@ -248,7 +274,7 @@ func (lscc *LifeCycleSysCC) putChaincodeData(stub shim.ChaincodeStubInterface, c
 		return MarshallErr(cd.Name)
 	}
 
-	err = stub.PutState(cd.Name, cdbytes)
+	err = lscc.putCache(cd.Name, cdbytes, stub)
 
 	return err
 }
